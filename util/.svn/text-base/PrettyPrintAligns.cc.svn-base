
#include "aligns/AccessAligns.h"
#include "base/CommandLineParser.h"

#include <iostream>

int main(int argc,char** argv)
{

  commandArg<string> iStringCmmd("-i","input access aligns file");

  commandLineParser P(argc,argv);
  P.SetDescription("Write out alignments in nice format.");

  P.registerArg(iStringCmmd);

  P.parse();

  string iString = P.GetStringValueFor(iStringCmmd);


  int i;


  
  cout << "This file contains the coordinates of alignments plus all differences." << endl;
  cout << "COORDINATES: ref_sequence  'aligned'  first_base  last_base  query_id  divergence(%)  orientation" << endl;
  cout << "DIFFERENCES: ref_sequence  difference_type  first_base  last_base  query_id  difference  quality_score" << endl;

  int j;
  AccessAligns access;
  access.Read(iString);


  cout << endl << "Begin data:" << endl;
  for (i=0; i<access.GetNumAlignments(); i++) {
    const OneAlignment & a = access.Get(i);
    
    cout << a.GetRefID() << "\taligned\t" << a.GetStart() << "\t" << a.GetEnd() << "\t";
    cout << a.GetContigID() << "\t" << 100. * a.GetSubstitutionRate() << "%\t";
    if (a.IsRC()) {
      cout << "rc";
    } else {
      cout << "fw";
    }
    cout << endl;
    
    int nDiff = a.GetNumDifferences();
    for (j=0; j<nDiff; j++) {
      const OneDifference & d = a.Get(j);
      cout << d.GetRefID() << "\t";
      
      switch(d.GetType()) {
	case DIFF_NONE:
	  cout << "unknown";
	  break;
	case DIFF_SNP:
	  cout << "SNP";
	  break;
	case DIFF_MISMATCH:
	  cout << "mismatch";
	  break;
	case DIFF_INSERTION:
	  cout << "insertion";
	  break;
	case DIFF_DELETION:
	  cout << "deletion";
	  break;
      }
      cout << "\t" << d.GetFirstBase() << "\t" << d.GetLastBase() << "\t" << d.GetContigID();
      cout << "\t" << d.GetConsensusBase() << ":" << d.GetBase() << "\t" << d.GetScore() << endl;
    }
    }
  
  return 0;
}
