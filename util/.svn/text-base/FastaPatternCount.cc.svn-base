//#ifndef FORCE_DEBUG
//#define NDEBUG
//#endif



#include "base/CommandLineParser.h"
#include "base/FileParser.h"



int main( int argc, char** argv )
{
  commandArg<string> iStringCmmd("-i","input fasta file");
  commandArg<string> cStringCmmd("-c","string to search for, e.g. 'GC'");

  commandLineParser P(argc,argv);
  P.SetDescription("Counts occurrences of a particular string in a fasta file without overlap.  Use 'X' for wild card character");
  P.registerArg(iStringCmmd);
  P.registerArg(cStringCmmd);

  P.parse();

  string fasta = P.GetStringValueFor(iStringCmmd);
  string pattern = P.GetStringValueFor(cStringCmmd);

  while(pattern[0]=='X') pattern.erase(0,1);
  while(pattern[pattern.length()-1]=='X') pattern.erase(pattern.length()-1,1);

  FlatFileParser fastaparse;
  fastaparse.Open(fasta);
  
  string templine; 
  int state=0;
  int count=0;
  
  while(fastaparse.GetLine(templine))
    {
      if(templine[0]=='>') continue;
      while(!templine.empty())
        {
	  if(templine[0]==pattern[state] || pattern[state]=='X') state++;
	  else state=0;

	  if(state==pattern.length())
	    {
              state=0;
	      count++;
	    }
	  templine.erase(0,1);
	}
    }

  cout << "String: " << pattern << "   Count (without overlaps): " << count << endl;  

  return 0;
}
    
