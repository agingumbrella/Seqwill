// Copyright (c) 2005 Broad Institute/Massachusetts Institute of Technology

#ifndef _LOADAGPCOORDS_H_
#define _LOADAGPCOORDS_H_

#include "util/mutil.h"
#include <string>
#include <vector>
#include "base/StringUtil.h"


class ContigCoords
{
public:
  ContigCoords() {
    m_start = 0;
    m_stop = 0;
    m_rc = false;
    m_super = -1;
  }

  void Set(int from, int to, bool rc, int chr, const string & name) {
    m_start = from;
    m_stop = to;
    m_rc = rc;
    m_super = chr;
    m_superName = name;
  }

  int GetStart() const {return m_start;}
  int GetEnd()   const {return m_stop;}
  bool IsRC()    const {return m_rc;}
  int GetChromosome() const {return m_super;}
  const string & GetChrName() const {return m_superName;}


private:
  int m_start;
  int m_stop;
  bool m_rc;
  int m_super;
  string m_superName;
};



int LoadAGP(vector<ContigCoords> & coords,
	    vector<int> & chrLen,
	    const string & fileName) 
{

  CMAsciiReadFileStream in;

  in.Open(fileName.c_str());

  CMString line;


  CMString lastName;
  int chrCount = -1;
  while (!in.IsEnd()) {
    in.ReadLine(line);
    if (in.IsEnd())
      break;
    
    CMPtrStringList tokens;
    Tokenize(tokens, line);

    if (*tokens(4) != "W")
      continue;

    const CMString & name = *tokens(0);

    if (name != lastName) {
      cout << "Name: " << name << endl;
      lastName = name;
      chrCount++;
      chrLen.push_back(0);
    }
    

    int start = atol(*tokens(1));
    int end = atol(*tokens(2));

    chrLen[chrCount] = end;

    int len = atol(*tokens(7));
    
    bool rc = false;
    if (*tokens(8) == "-")
      rc = true;

    char tmp[64];
    const char * p = *tokens(5);
    strcpy(tmp, &p[7]);
    int contig = atol(tmp);


    if (contig >= (int) coords.size()) {
      coords.resize(contig + 20000);
    }

    ContigCoords & c = coords[contig];
    c.Set(start, end, rc, chrCount, (const char*)name);
   
  }


  in.Close();

  return chrCount + 1;
}


#endif //_LOADAGPCOORDS_H_

